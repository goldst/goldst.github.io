/// <reference types="node" />
import EventEmitter from 'events';
import Command, { ICommandOptions, CommandHandler } from './Command';
import Options, { IOptionsInput } from './Options';
export interface ICacOptions {
    bin?: string;
    pkg?: {
        [k: string]: any;
    };
    defaultOpts?: boolean | {
        help?: boolean;
        version?: boolean;
    };
}
export interface IExtraHelp {
    title: string;
    body: string;
}
export declare type Plugin = (ctx: Cac) => any;
export interface ParseOpts {
    run?: boolean;
    showHelp?: (command: Command | null, input: string[], flags: {
        [k: string]: any;
    }) => boolean;
}
export declare type Flags = {
    [k: string]: any;
};
interface Cac {
    on(event: 'parsed', listener: (command: Command | null, input: string[], flags: Flags) => void): this;
    on(event: 'executed', listener: (command: Command | null, input: string[], flags: Flags) => void): this;
    on(event: 'error', listener: (err: Error) => void): this;
}
declare class Cac extends EventEmitter {
    /**
     * The  name of executed file
     *
     * For `node cli.js` it defaults to `cli.js`
     */
    bin: string;
    /**
     * The data of the closest package.json
     */
    pkg: {
        [k: string]: any;
    };
    /**
     * Extra help Messages
     */
    extraHelps: (IExtraHelp | string)[];
    /**
     * Add default `help` option
     */
    helpOpt: boolean;
    /**
     * Add default `version` option
     */
    versionOpt: boolean;
    commands: Command[];
    options: Options;
    /**
     * The CLI has parsed once
     */
    started: boolean;
    commandName: string;
    matchedCommand: Command | null;
    constructor({bin, pkg, defaultOpts}?: ICacOptions);
    /**
     * Use a plugin or an array of plugins
     */
    use(plugin: Plugin | Plugin[]): this;
    /**
     * Add a global option
     */
    option(name: string, opt: IOptionsInput | string): this;
    /**
     * Add a sub command
     */
    command(name: string, opt: ICommandOptions | string, handler?: CommandHandler): Command;
    /**
     * Commands to string
     *
     * Used to display help
     */
    commandsToString(): string;
    /**
     * Check if there's any command
     */
    isCommandsEmpty(): boolean;
    /**
     * Find command by command name, alias or addtionalMatch
     */
    findCommand(name: string): {
        sliceFirstArg: boolean;
        command: Command | null;
    };
    readonly argv: {
        input: string[];
        flags: Flags;
    };
    showHelp(): this;
    /**
     * Show version in console
     */
    showVersion(): void;
    /**
     * Add an extra help message
     */
    extraHelp(help: string | IExtraHelp): this;
    /**
     * Parse CLI argument and run commands
     * @param argv Default to `process.argv.slice(2)`
     * @param opts
     */
    parse(argv?: string[] | null, opts?: ParseOpts): {
        input: string[];
        flags: Flags;
    };
    handleError(err: Error): void;
}
export default Cac;
